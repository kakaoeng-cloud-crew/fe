/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * cloud-crew-api
 * RAPA KAKAO ENG 4 Final Project-Cloud Crew
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  DelProject200,
  DelProject404,
  DelProject500,
  GetEndpoint404,
  GetEndpoint500,
  GetProject200,
  GetProject404,
  GetProject500,
  GetProjects200,
  GetProjects404,
  GetProjects500,
  NewProject201,
  NewProject400,
  NewProject500,
  NewProjectBody,
} from '.././model';
import { useCustomInstance } from '../../../.instances/index';

/**
 * ÌòÑÏû¨ ÏÉùÏÑ±Îêú ÌîÑÎ°úÏ†ùÌä∏ Î¶¨Ïä§Ìä∏Î•º Î™®Îëê Ï°∞ÌöåÌï©ÎãàÎã§. (AJAXÎ°ú ÎπÑÎèôÍ∏∞Ï†Å ÌÜµÏã† Íµ¨ÏÑ± ÌïÑÏöî)
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const useGetProjectsHook = () => {
  const getProjects = useCustomInstance<GetProjects200>();

  return (signal?: AbortSignal) => {
    return getProjects({ url: `/api/v1/projects`, method: 'GET', signal });
  };
};

export const getGetProjectsQueryKey = () => {
  return [`/api/v1/projects`] as const;
};

export const useGetProjectsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>,
  TError = GetProjects404 | GetProjects500,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectsQueryKey();

  const getProjects = useGetProjectsHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>> = ({ signal }) =>
    getProjects(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>>;
export type GetProjectsQueryError = GetProjects404 | GetProjects500;

/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const useGetProjects = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>,
  TError = GetProjects404 | GetProjects500,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectsHook>>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetProjectsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑ ÏÉàÎ°úÏö¥ ÏÉåÎìúÎ∞ïÏä§ ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±
 * @summary ÏÉàÎ°úÏö¥ ÏÉåÎìúÎ∞ïÏä§ ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÌïòÍ∏∞
 */
export const useNewProjectHook = () => {
  const newProject = useCustomInstance<NewProject201>();

  return (newProjectBody: NewProjectBody) => {
    const formData = new FormData();
    if (newProjectBody.project_name !== undefined) {
      formData.append('project_name', newProjectBody.project_name);
    }
    if (newProjectBody.template !== undefined) {
      formData.append('template', newProjectBody.template);
    }
    if (newProjectBody.values !== undefined) {
      formData.append('values', newProjectBody.values);
    }

    return newProject({
      url: `/api/v1/projects`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    });
  };
};

export const useNewProjectMutationOptions = <TError = NewProject400 | NewProject500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useNewProjectHook>>>,
    TError,
    { data: NewProjectBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useNewProjectHook>>>,
  TError,
  { data: NewProjectBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const newProject = useNewProjectHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useNewProjectHook>>>,
    { data: NewProjectBody }
  > = (props) => {
    const { data } = props ?? {};

    return newProject(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type NewProjectMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useNewProjectHook>>>>;
export type NewProjectMutationBody = NewProjectBody;
export type NewProjectMutationError = NewProject400 | NewProject500;

/**
 * @summary ÏÉàÎ°úÏö¥ ÏÉåÎìúÎ∞ïÏä§ ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÌïòÍ∏∞
 */
export const useNewProject = <TError = NewProject400 | NewProject500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useNewProjectHook>>>,
    TError,
    { data: NewProjectBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useNewProjectHook>>>,
  TError,
  { data: NewProjectBody },
  TContext
> => {
  const mutationOptions = useNewProjectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Projects Î¶¨ÏÜåÏä§ÏóêÏÑú Îã®Ïùº ÌîÑÎ°úÏ†ùÌä∏ ÎèÑÌÅêÎ®ºÌä∏Ïùò Îç∞Ïù¥ÌÑ∞Î•º Ï°∞ÌöåÌïòÏó¨ Ï†ëÏÜç end_pointÏôÄ meta_dataÎ•º Î≥¥Ïó¨Ï§çÎãàÎã§.
 * @summary Îã®Ïùº ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ ÎÇ¥Ïö© Ï°∞Ìöå
 */
export const useGetProjectHook = () => {
  const getProject = useCustomInstance<GetProject200>();

  return (projectId: string, signal?: AbortSignal) => {
    return getProject({ url: `/api/v1/projects/${projectId}`, method: 'GET', signal });
  };
};

export const getGetProjectQueryKey = (projectId: string) => {
  return [`/api/v1/projects/${projectId}`] as const;
};

export const useGetProjectQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>,
  TError = GetProject404 | GetProject500,
>(
  projectId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectQueryKey(projectId);

  const getProject = useGetProjectHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>> = ({ signal }) =>
    getProject(projectId, signal);

  return { queryKey, queryFn, enabled: !!projectId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>>;
export type GetProjectQueryError = GetProject404 | GetProject500;

/**
 * @summary Îã®Ïùº ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ ÎÇ¥Ïö© Ï°∞Ìöå
 */
export const useGetProject = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>,
  TError = GetProject404 | GetProject500,
>(
  projectId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectHook>>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetProjectQueryOptions(projectId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ï£ºÏñ¥ÏßÑ project_nameÏóê Ìï¥ÎãπÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Îã®Ïùº ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú
 */
export const useDelProjectHook = () => {
  const delProject = useCustomInstance<DelProject200>();

  return (projectId: string) => {
    return delProject({ url: `/api/v1/projects/${projectId}`, method: 'DELETE' });
  };
};

export const useDelProjectMutationOptions = <TError = DelProject404 | DelProject500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDelProjectHook>>>,
    TError,
    { projectId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDelProjectHook>>>,
  TError,
  { projectId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const delProject = useDelProjectHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDelProjectHook>>>,
    { projectId: string }
  > = (props) => {
    const { projectId } = props ?? {};

    return delProject(projectId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DelProjectMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDelProjectHook>>>>;

export type DelProjectMutationError = DelProject404 | DelProject500;

/**
 * @summary Îã®Ïùº ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú
 */
export const useDelProject = <TError = DelProject404 | DelProject500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDelProjectHook>>>,
    TError,
    { projectId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useDelProjectHook>>>,
  TError,
  { projectId: string },
  TContext
> => {
  const mutationOptions = useDelProjectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ingress ControllerÏóê ÏÉùÏÑ±Îêú ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï∂îÍ∞ÄÌïòÎäî ÌòïÏãùÏúºÎ°ú ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï†úÍ≥µÌï† Ïàò ÏûàÏùÑ Í≤ÉÏúºÎ°ú Î≥¥ÏûÖÎãàÎã§. Í∞úÎÖê Ï¶ùÎ™Ö ÌïÑÏöî!
 * @summary ÏÉùÏÑ±Îêú ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏóîÎìúÌè¨Ïù∏Ìä∏ Ï£ºÏÜå Ï†ëÍ∑º
 */
export const useGetEndpointHook = () => {
  const getEndpoint = useCustomInstance<Blob>();

  return (projectName: string, signal?: AbortSignal) => {
    return getEndpoint({ url: `/api/v1/projects/${projectName}`, method: 'GET', responseType: 'blob', signal });
  };
};

export const getGetEndpointQueryKey = (projectName: string) => {
  return [`/api/v1/projects/${projectName}`] as const;
};

export const useGetEndpointQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>,
  TError = GetEndpoint404 | GetEndpoint500,
>(
  projectName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEndpointQueryKey(projectName);

  const getEndpoint = useGetEndpointHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>> = ({ signal }) =>
    getEndpoint(projectName, signal);

  return { queryKey, queryFn, enabled: !!projectName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEndpointQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>>;
export type GetEndpointQueryError = GetEndpoint404 | GetEndpoint500;

/**
 * @summary ÏÉùÏÑ±Îêú ÌîÑÎ°úÏ†ùÌä∏Ïùò ÏóîÎìúÌè¨Ïù∏Ìä∏ Ï£ºÏÜå Ï†ëÍ∑º
 */
export const useGetEndpoint = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>,
  TError = GetEndpoint404 | GetEndpoint500,
>(
  projectName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEndpointHook>>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetEndpointQueryOptions(projectName, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
